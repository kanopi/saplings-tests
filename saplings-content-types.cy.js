import { randText, randLines, randPhrase } from '@ngneat/falso';

describe('Verify the Saplings Content Types recipe applied properly.', () => {

  /**************************************************************
   * Module install and verification section.
   *************************************************************/
  it('Verify all core modules were installed and enabled.', () => {
    // Login and visit the extend/modules page.
    cy.login()
    cy.visit('/admin/modules')
    // Verify Menu UI module was installed and enabled.
    cy.get('#edit-modules-menu-ui-enable').should('be.checked')
  })

  it('Verify all contrib modules were installed and enabled.', () => {
    // Login and visit the extend/modules page.
    cy.login()
    cy.visit('/admin/modules')
    // Verify Access Unpublished module was installed and enabled.
    cy.get('#edit-modules-access-unpublished-enable').should('be.checked')
    // Verify Field Group module was installed and enabled.
    cy.get('#edit-modules-field-group-enable').should('be.checked')
    // Verify Metatag: Open Graph module was installed and enabled.
    cy.get('#edit-modules-metatag-open-graph-enable').should('be.checked')
    // Verify Metatag: Twitter Cards module was installed and enabled.
    cy.get('#edit-modules-metatag-twitter-cards-enable').should('be.checked')
    // Verify Pathauto module was installed and enabled.
    cy.get('#edit-modules-pathauto-enable').should('be.checked')
    // Verify Publication Date module was installed and enabled.
    cy.get('#edit-modules-publication-date-enable').should('be.checked')
    // Verify Scheduler module was installed and enabled.
    cy.get('#edit-modules-scheduler-enable').should('be.checked')
    // Verify Scheduler Content Mederation Integration module was installed and enabled.
    cy.get('#edit-modules-scheduler-content-moderation-integration-enable').should('be.checked')
    // Verify Schema.org Article module was installed and enabled.
    cy.get('#edit-modules-schema-article-enable').should('be.checked')
    // Verify Simple Sitemap module was installed and enabled.
    cy.get('#edit-modules-simple-sitemap-enable').should('be.checked')
    // Verify Token Or module was installed and enabled.
    cy.get('#edit-modules-token-or-enable').should('be.checked')
  })

  /*********************************************************
   * Configuration Import verification section.
   ********************************************************/
  it('Verify Content: Page and Content: Post default metatags are configured.', () => {
    cy.login()
    // Verify Page default metatags
    cy.visit('/admin/config/search/metatag/node__sa_page?destination=/admin/config/search/metatag')
    cy.get('#edit-title').should('have.value', '[node:sa_seo_page_title|node:title] | [site:name]')
    cy.get('#edit-description').should('contain.text', '[node:sa_seo_description|node:sa_description]')
    cy.get('#edit-canonical-url').should('have.value', '[current-page:url:absolute]')
    cy.get('#edit-image-src').should('have.value', '[node:sa_featured_image:entity:field_media_image:sa_social_media_facebook]')
    cy.get('#edit-rights').should('have.value', 'Copyright ©[date:html_year] All rights reserved.')
    cy.get('#edit-og-site-name').should('have.value', '[site:name]')
    cy.get('#edit-og-type').should('have.value', 'website')
    cy.get('#edit-og-url').should('have.value', '[current-page:url:absolute]')
    cy.get('#edit-og-title').should('have.value', '[node:sa_seo_page_title|node:title]')
    cy.get('#edit-og-description').should('contain.text', '[node:sa_seo_description|node:sa_description]')
    cy.get('#edit-og-image').should('have.value', '[node:sa_featured_image:entity:field_media_image:sa_social_media_facebook]')
    cy.get('#edit-og-image-type').should('have.value', '[node:sa_featured_image:entity:field_media_image:sa_social_media_facebook:mimetype]')
    cy.get('#edit-og-image-width').should('have.value', '[node:sa_featured_image:entity:field_media_image:sa_social_media_facebook:width]')
    cy.get('#edit-og-image-height').should('have.value', '[node:sa_featured_image:entity:field_media_image:sa_social_media_facebook:height]')
    cy.get('#edit-og-image-alt').should('have.value', '[node:sa_featured_image:entity:field_media_image:alt]')
    cy.get('#edit-og-updated-time').should('have.value', '[node:changed:custom:c]')
    cy.get('#edit-og-locale').should('have.value', 'en_US')
    cy.get('#edit-twitter-cards-type').should('have.value', 'summary_large_image')
    cy.get('#edit-twitter-cards-description').should('have.value', '[node:sa_seo_description|node:sa_description]')
    cy.get('#edit-twitter-cards-title').should('have.value', '[node:sa_seo_page_title|node:title]')
    cy.get('#edit-twitter-cards-image').should('have.value', '[node:sa_featured_image:entity:field_media_image:sa_social_media_x:url]')
    cy.get('#edit-twitter-cards-image-alt').should('have.value', '[node:sa_featured_image:entity:field_media_image:alt]')
    // Verify Post default metatags
    cy.visit('/admin/config/search/metatag/node__sa_post?destination=/admin/config/search/metatag')
    cy.get('#edit-title').should('have.value', '[node:sa_seo_page_title|node:title] | [site:name]')
    cy.get('#edit-description').should('contain.text', '[node:sa_seo_description|node:sa_description]')
    cy.get('#edit-canonical-url').should('have.value', '[current-page:url:absolute]')
    cy.get('#edit-image-src').should('have.value', '[node:sa_featured_image:entity:field_media_image:sa_social_media_facebook]')
    cy.get('#edit-rights').should('have.value', 'Copyright ©[date:html_year] All rights reserved.')
    cy.get('#edit-og-site-name').should('have.value', '[site:name]')
    cy.get('#edit-og-type').should('have.value', 'article')
    cy.get('#edit-og-url').should('have.value', '[current-page:url:absolute]')
    cy.get('#edit-og-title').should('have.value', '[node:sa_seo_page_title|node:title]')
    cy.get('#edit-og-description').should('contain.text', '[node:sa_seo_description|node:sa_description]')
    cy.get('#edit-og-image').should('have.value', '[node:sa_featured_image:entity:field_media_image:sa_social_media_facebook]')
    cy.get('#edit-og-image-type').should('have.value', '[node:sa_featured_image:entity:field_media_image:sa_social_media_facebook:mimetype]')
    cy.get('#edit-og-image-width').should('have.value', '[node:sa_featured_image:entity:field_media_image:sa_social_media_facebook:width]')
    cy.get('#edit-og-image-height').should('have.value', '[node:sa_featured_image:entity:field_media_image:sa_social_media_facebook:height]')
    cy.get('#edit-og-image-alt').should('have.value', '[node:sa_featured_image:entity:field_media_image:alt]')
    cy.get('#edit-og-updated-time').should('have.value', '[node:changed:custom:c]')
    cy.get('#edit-og-locale').should('have.value', 'en_US')
    cy.get('#edit-twitter-cards-type').should('have.value', 'summary_large_image')
    cy.get('#edit-twitter-cards-description').should('have.value', '[node:sa_seo_description|node:sa_description]')
    cy.get('#edit-twitter-cards-title').should('have.value', '[node:sa_seo_page_title|node:title]')
    cy.get('#edit-twitter-cards-image').should('have.value', '[node:sa_featured_image:entity:field_media_image:sa_social_media_x:url]')
    cy.get('#edit-twitter-cards-image-alt').should('have.value', '[node:sa_featured_image:entity:field_media_image:alt]')
  })
  it('Verify Pathauto pattern for Page and Post path is set.', () => {
    cy.login()
    cy.visit('/admin/config/search/path/patterns')
    cy.get('[data-drupal-selector="edit-entities-sa-page"]').should('contain.text', '[node:menu-link:parents:join-path]/[node:title]')
    cy.get('[data-drupal-selector="edit-entities-sa-post"]').should('contain.text', '[node:content-type]/[node:sa_type]/[node:title]')
  })
  it('Verify Simple Sitemap Page and Post settings are set.', () => {
    cy.login()
    cy.visit('/admin/config/search/simplesitemap/entities/node?destination=/admin/config/search/simplesitemap/entities')
    // Verify Page Sitemap settings.
    cy.get('#edit-bundles-sa-page-default-index-1').should('be.checked')
    cy.get('#edit-bundles-sa-page-default-priority').should('have.value', '0.8')
    cy.get('#edit-bundles-sa-page-default-changefreq').should('have.value', '')
    cy.get('#edit-bundles-sa-page-default-include-images').should('have.value', '0')
    // Verify Post Sitemap settings.
    cy.get('#edit-bundles-sa-post-default-index-1').should('be.checked')
    cy.get('#edit-bundles-sa-post-default-priority').should('have.value', '0.5')
    cy.get('#edit-bundles-sa-post-default-changefreq').should('have.value', '')
    cy.get('#edit-bundles-sa-post-default-include-images').should('have.value', '0')
  })
  it('Verify Page and Post content type edit settings.', () => {
    cy.login()
    // Verify Page content type edit settings.
    cy.visit('/admin/structure/types/manage/sa_page?destination=/admin/structure/types')
    cy.get('#edit-name').should('have.value', 'Page')
    cy.get('#edit-description').should('contain.text', "Used for the primary pages of the site like the homepage and other pages that are in the site's menus.")
    cy.get('#edit-title-label').should('have.value', 'Title')
    cy.get('#edit-preview-mode-1').should('be.checked')
    cy.get('#edit-help').should('contain.text', '')
    cy.get('#edit-options-status').should('not.be.checked')
    cy.get('#edit-options-promote').should('not.be.checked')
    cy.get('#edit-options-sticky').should('not.be.checked')
    cy.get('#edit-options-revision').should('be.checked')
    cy.get('#edit-display-submitted').should('not.be.checked')
    cy.get('#edit-menu-options-admin').should('not.be.checked')
    cy.get('#edit-menu-options-footer').should('not.be.checked')
    cy.get('#edit-menu-options-main').should('be.checked')
    cy.get('#edit-menu-options-tools').should('not.be.checked')
    cy.get('#edit-menu-options-account').should('not.be.checked')
    cy.get('#edit-menu-parent').should('have.value', 'main:')
    cy.get('#edit-scheduler-publish-enable').should('be.checked')
    cy.get('#edit-scheduler-publish-touch').should('be.checked')
    cy.get('#edit-scheduler-publish-required').should('not.be.checked')
    cy.get('#edit-scheduler-publish-revision').should('not.be.checked')
    cy.get('#edit-scheduler-publish-past-date-publish').should('be.checked')
    cy.get('#edit-scheduler-unpublish-enable').should('not.be.checked')
    cy.get('#edit-scheduler-fields-display-mode-vertical-tab').should('be.checked')
    cy.get('#edit-scheduler-expand-fieldset-when-required').should('be.checked')
    cy.get('#edit-scheduler-show-message-after-update').should('be.checked')
    // Verify Post content type edit settings.
    cy.visit('/admin/structure/types/manage/sa_post?destination=/admin/structure/types')
    cy.get('#edit-name').should('have.value', 'Post')
    cy.get('#edit-description').should('contain.text', "Used for filterable pieces of content like articles, news, press releases, etc.  Can be categorized, and then filtered using the Post Type and Category taxonomies.")
    cy.get('#edit-title-label').should('have.value', 'Title')
    cy.get('#edit-preview-mode-1').should('be.checked')
    cy.get('#edit-help').should('contain.text', '')
    cy.get('#edit-options-status').should('not.be.checked')
    cy.get('#edit-options-promote').should('not.be.checked')
    cy.get('#edit-options-sticky').should('not.be.checked')
    cy.get('#edit-options-revision').should('be.checked')
    cy.get('#edit-display-submitted').should('not.be.checked')
    cy.get('#edit-menu-options-admin').should('not.be.checked')
    cy.get('#edit-menu-options-footer').should('not.be.checked')
    cy.get('#edit-menu-options-main').should('not.be.checked')
    cy.get('#edit-menu-options-tools').should('not.be.checked')
    cy.get('#edit-menu-options-account').should('not.be.checked')
    cy.get('#edit-scheduler-publish-enable').should('be.checked')
    cy.get('#edit-scheduler-publish-touch').should('be.checked')
    cy.get('#edit-scheduler-publish-required').should('not.be.checked')
    cy.get('#edit-scheduler-publish-revision').should('not.be.checked')
    cy.get('#edit-scheduler-publish-past-date-publish').should('be.checked')
    cy.get('#edit-scheduler-unpublish-enable').should('not.be.checked')
    cy.get('#edit-scheduler-fields-display-mode-vertical-tab').should('be.checked')
    cy.get('#edit-scheduler-expand-fieldset-when-required').should('be.checked')
    cy.get('#edit-scheduler-show-message-after-update').should('be.checked')
  })
  it('Verify Page and Post content types contain all the correct fields and field types', () => {
    cy.login()
    // Verify the Page content type fields.
    cy.visit('/admin/structure/types/manage/sa_page/fields')
    cy.get('#sa-components').should('exist')
    cy.get('#sa-components').find('.item-list').should('include.text', 'Entity reference revisions')
    cy.get('#sa-components').find('.item-list').should('include.text', 'Reference type: Paragraph')
    cy.get('#sa-description').should('exist')
    cy.get('#sa-description').find('.item-list').should('include.text', 'Text (plain, long)')
    cy.get('#sa-featured-image').should('exist')
    cy.get('#sa-featured-image').find('.item-list').should('include.text', 'Entity reference')
    cy.get('#sa-featured-image').find('.item-list').should('include.text', 'Reference type: Media')
    cy.get('#sa-featured-image').find('.item-list').should('include.text', 'Media type: Image')
    cy.get('#sa-robots').should('exist')
    cy.get('#sa-robots').find('.item-list').should('include.text', 'Text (plain)')
    cy.get('#sa-seo-description').should('exist')
    cy.get('#sa-seo-description').find('.item-list').should('include.text', 'Text (plain, long)')
    cy.get('#sa-seo-image').should('exist')
    cy.get('#sa-seo-image').find('.item-list').should('include.text', 'Entity reference')
    cy.get('#sa-seo-image').find('.item-list').should('include.text', 'Reference type: Media')
    cy.get('#sa-seo-image').find('.item-list').should('include.text', 'Media type: Image')
    cy.get('#sa-seo-page-title').should('exist')
    cy.get('#sa-seo-page-title').find('.item-list').should('include.text', 'Text (plain)')
    // Verify the Post content type fields.
    cy.visit('/admin/structure/types/manage/sa_post/fields')
    cy.get('#sa-author').should('exist')
    cy.get('#sa-author').find('.item-list').should('include.text', 'Text (plain)')
    cy.get('#sa-author-url').should('exist')
    cy.get('#sa-author-url').find('.item-list').should('include.text', 'Link')
    cy.get('#sa-body').should('exist')
    cy.get('#sa-body').find('.item-list').should('include.text', 'Text (formatted, long, with summary)')
    cy.get('#sa-category').should('exist')
    cy.get('#sa-category').find('.item-list').should('include.text', 'Entity reference')
    cy.get('#sa-category').find('.item-list').should('include.text', 'Reference type: Taxonomy term')
    cy.get('#sa-category').find('.item-list').should('include.text', 'Vocabulary: Category')
    cy.get('#sa-description').should('exist')
    cy.get('#sa-description').find('.item-list').should('include.text', 'Text (plain, long)')
    cy.get('#sa-external-source').should('exist')
    cy.get('#sa-external-source').find('.item-list').should('include.text', 'Link')
    cy.get('#sa-featured-image').should('exist')
    cy.get('#sa-featured-image').find('.item-list').should('include.text', 'Entity reference')
    cy.get('#sa-featured-image').find('.item-list').should('include.text', 'Reference type: Media')
    cy.get('#sa-featured-image').find('.item-list').should('include.text', 'Media type: Image')
    cy.get('#sa-related-posts').should('exist')
    cy.get('#sa-related-posts').find('.item-list').should('include.text', 'Entity reference')
    cy.get('#sa-related-posts').find('.item-list').should('include.text', 'Reference type: Content')
    cy.get('#sa-related-posts').find('.item-list').should('include.text', 'Content type:')
    cy.get('#sa-robots').should('exist')
    cy.get('#sa-robots').find('.item-list').should('include.text', 'Text (plain)')
    cy.get('#sa-seo-description').should('exist')
    cy.get('#sa-seo-description').find('.item-list').should('include.text', 'Text (plain, long)')
    cy.get('#sa-seo-image').should('exist')
    cy.get('#sa-seo-image').find('.item-list').should('include.text', 'Entity reference')
    cy.get('#sa-seo-image').find('.item-list').should('include.text', 'Reference type: Media')
    cy.get('#sa-seo-image').find('.item-list').should('include.text', 'Media type: Image')
    cy.get('#sa-seo-page-title').should('exist')
    cy.get('#sa-seo-page-title').find('.item-list').should('include.text', 'Text (plain)')
    cy.get('#sa-type').should('exist')
    cy.get('#sa-type').find('.item-list').should('include.text', 'Entity reference')
    cy.get('#sa-type').find('.item-list').should('include.text', 'Reference type: Taxonomy term')
    cy.get('#sa-type').find('.item-list').should('include.text', 'Vocabulary: Post Type')
  })
  it('Verify creation of Page and Post content types.', () => {
    cy.login()
    // Verify the Page content type creation.
    const pageTitle = "Page Test - " +  randText()
    const pageDescription = randLines()
    const seoDescription = randLines()
    const robotMeta = "Robots metatag test"
    cy.visit('/node/add/sa_page')
    cy.get("#edit-title-wrapper").type(pageTitle)
    cy.get('#edit-sa-description-wrapper').type(pageDescription)
    cy.mediaLibraryAdd('#sa_featured_image-media-library-wrapper', 'image-sample_01.png')
    cy.get('.horizontal-tabs-list').contains('Advanced SEO').click()
    cy.get("#edit-sa-seo-page-title-wrapper").type(pageTitle)
    cy.get('#edit-sa-seo-description-wrapper').type(seoDescription)
    cy.mediaLibraryAdd('#sa_seo_image-media-library-wrapper', 'image-sample_01.png')
    cy.get("#edit-sa-robots-0-value").type(robotMeta)
    cy.get("#edit-submit--2--gin-edit-form").click()
    cy.get('body').should('contain', pageTitle)
    // Verify the Post content type creation.
    const postTitle = "Post Test - " +  randText()
    const postDescription = randLines()
    const postAuthor = "Author - " + randText()
    const postAuthorExternalURL = "http://www.google.com"
    const postBody = randLines()
    cy.visit('/node/add/sa_post')
    cy.get("#edit-title-wrapper").type(postTitle)
    cy.get('#edit-sa-description-wrapper').type(postDescription)
    cy.mediaLibraryAdd('#sa_featured_image-media-library-wrapper', 'image-sample_01.png')
    cy.get('#edit-sa-author-wrapper').type(postAuthor)
    cy.get('#edit-sa-author-url-0-uri').type(postAuthorExternalURL)
    cy.get('#edit-sa-external-source-0-uri').type(postAuthorExternalURL)
    cy.get('.horizontal-tabs-list').contains('Content').click()
    cy.ckeditorType('#edit-sa-body-wrapper', postBody);
    cy.get('.horizontal-tabs-list').contains('Advanced SEO').click()
    cy.get("#edit-sa-seo-page-title-wrapper").type(postTitle)
    cy.get('#edit-sa-seo-description-wrapper').type(postDescription)
    cy.mediaLibraryAdd('#sa_seo_image-media-library-wrapper', 'image-sample_01.png')
    cy.get("#edit-sa-robots-0-value").type(robotMeta)
    cy.get("#edit-submit--2--gin-edit-form").click()
    cy.get('body').should('contain', postTitle)
    cy.get('body').should('contain', postAuthor)
    cy.get('body').should('contain', postAuthorExternalURL)
    cy.get('body').should('contain', postBody)
  })

  /**************************************************************
   * saplings-component-types recipe verification section.
   *************************************************************/
  it('Verify all core modules were installed and enabled for saplings-component-types recipe.', () => {
    // Login and visit the extend/modules page.
    cy.login()
    cy.visit('/admin/modules')
    // Verify Block Content module was installed and enabled.
    cy.get('#edit-modules-block-content-enable').should('be.checked')
    // Verify Media module was installed and enabled.
    cy.get('#edit-modules-media-enable').should('be.checked')
    // Verify Media Library module was installed and enabled.
    cy.get('#edit-modules-media-library-enable').should('be.checked')
    // Verify Text module was installed and enabled.
    cy.get('#edit-modules-text-enable').should('be.checked')
  })
  it('Verify all contrib modules were installed and enabled for saplings-component-types recipe.', () => {
    // Login and visit the extend/modules page.
    cy.login()
    cy.visit('/admin/modules')
    // Verify Block Field module was installed and enabled.
    cy.get('#edit-modules-block-field-enable').should('be.checked')
    // Verify Display Suite module was installed and enabled.
    cy.get('#edit-modules-ds-enable').should('be.checked')
    // Verify Element Class Formatter module was installed and enabled.
    cy.get('#edit-modules-element-class-formatter-enable').should('be.checked')
    // Verify Entity Reference Revisions module was installed and enabled.
    cy.get('#edit-modules-entity-reference-revisions-enable').should('be.checked')
    // Verify No Markup module was installed and enabled.
    cy.get('#edit-modules-nomarkup-enable').should('be.checked')
    // Verify Paragraphs module was installed and enabled.
    cy.get('#edit-modules-paragraphs-enable').should('be.checked')
    // Verify Views Reference Field module was installed and enabled.
    cy.get('#edit-modules-viewsreference-enable').should('be.checked')
  })
  it('Verify all paragraph types exist from the saplings-component-types recipe.', () => {
    cy.login()
    cy.visit('/admin/structure/paragraphs_type')
    cy.get('#block-gin-content').should('include.text', 'Accordion')
    cy.get('#block-gin-content').should('include.text', 'sa_accordion')
    cy.get('#block-gin-content').should('include.text', 'Accordion Item')
    cy.get('#block-gin-content').should('include.text', 'sa_accordion_item')
    cy.get('#block-gin-content').should('include.text', 'Block')
    cy.get('#block-gin-content').should('include.text', 'sa_block')
    cy.get('#block-gin-content').should('include.text', 'Card')
    cy.get('#block-gin-content').should('include.text', 'sa_card')
    cy.get('#block-gin-content').should('include.text', 'Carousel')
    cy.get('#block-gin-content').should('include.text', 'sa_carousel')
    cy.get('#block-gin-content').should('include.text', 'Carousel Item')
    cy.get('#block-gin-content').should('include.text', 'sa_carousel_item')
    cy.get('#block-gin-content').should('include.text', 'Filtered List')
    cy.get('#block-gin-content').should('include.text', 'sa_filtered_list')
    cy.get('#block-gin-content').should('include.text', 'Media')
    cy.get('#block-gin-content').should('include.text', 'sa_media')
    cy.get('#block-gin-content').should('include.text', 'Side by Side')
    cy.get('#block-gin-content').should('include.text', 'sa_side_by_side')
    cy.get('#block-gin-content').should('include.text', 'Tab')
    cy.get('#block-gin-content').should('include.text', 'sa_tab')
    cy.get('#block-gin-content').should('include.text', 'Tabs')
    cy.get('#block-gin-content').should('include.text', 'sa_tabs')
    cy.get('#block-gin-content').should('include.text', 'Text')
    cy.get('#block-gin-content').should('include.text', 'sa_text')
  })
  it('Verify all the correct fields exists on paragraphs from saplings-component-types recipe.', () => {
    cy.login()
    // Verify the Accordion paragraph fields.
    cy.visit('/admin/structure/paragraphs_type/sa_accordion/fields')
    cy.get('#sa-accordion-item').should('exist')
    cy.get('#sa-accordion-item').find('.item-list').should('include.text', 'Entity reference revisions')
    cy.get('#sa-accordion-item').find('.item-list').should('include.text', 'Reference type: Paragraph')
    cy.get('#sa-accordion-item').find('.item-list').should('include.text', 'Paragraph type: Accordion Item')
    cy.get('#sa-background').should('exist')
    cy.get('#sa-background').find('.item-list').should('include.text', 'List (text)')
    cy.get('#sa-width').should('exist')
    cy.get('#sa-width').find('.item-list').should('include.text', 'List (text)')
    cy.get('#sa-description').should('exist')
    cy.get('#sa-description').find('.item-list').should('include.text', 'Text (formatted, long)')
    cy.get('#sa-header').should('exist')
    cy.get('#sa-header').find('.item-list').should('include.text', 'Text (plain)')
    cy.get('#sa-margin').should('exist')
    cy.get('#sa-margin').find('.item-list').should('include.text', 'List (text)')
    cy.get('#sa-padding').should('exist')
    cy.get('#sa-padding').find('.item-list').should('include.text', 'List (text)')
    cy.get('#sa-col').should('exist')
    cy.get('#sa-col').find('.item-list').should('include.text', 'List (text)')
    // Verify the Accordion Item paragraph fields.
    cy.visit('/admin/structure/paragraphs_type/sa_accordion_item/fields')
    cy.get('#sa-description').should('exist')
    cy.get('#sa-description').find('.item-list').should('include.text', 'Text (formatted, long)')
    cy.get('#sa-header').should('exist')
    cy.get('#sa-header').find('.item-list').should('include.text', 'Text (plain)')
    // Verify the Block paragraph fields.
    cy.visit('/admin/structure/paragraphs_type/sa_block/fields')
    cy.get('#sa-background').should('exist')
    cy.get('#sa-background').find('.item-list').should('include.text', 'List (text)')
    cy.get('#sa-block').should('exist')
    cy.get('#sa-block').find('.item-list').should('include.text', 'Block (plugin)')
    cy.get('#sa-width').should('exist')
    cy.get('#sa-width').find('.item-list').should('include.text', 'List (text)')
    cy.get('#sa-description').should('exist')
    cy.get('#sa-description').find('.item-list').should('include.text', 'Text (formatted, long)')
    cy.get('#sa-header').should('exist')
    cy.get('#sa-header').find('.item-list').should('include.text', 'Text (plain)')
    cy.get('#sa-margin').should('exist')
    cy.get('#sa-margin').find('.item-list').should('include.text', 'List (text)')
    cy.get('#sa-padding').should('exist')
    cy.get('#sa-padding').find('.item-list').should('include.text', 'List (text)')
    cy.get('#sa-col').should('exist')
    cy.get('#sa-col').find('.item-list').should('include.text', 'List (text)')
    // Verify the Card paragraph fields.
    cy.visit('/admin/structure/paragraphs_type/sa_card/fields')
    cy.get('#sa-card-image').should('exist')
    cy.get('#sa-card-image').find('.item-list').should('include.text', 'Entity reference')
    cy.get('#sa-card-image').find('.item-list').should('include.text', 'Reference type: Media')
    cy.get('#sa-card-image').find('.item-list').should('include.text', 'Media type: Image')
    cy.get('#sa-description').should('exist')
    cy.get('#sa-description').find('.item-list').should('include.text', 'Text (formatted, long)')
    cy.get('#sa-header').should('exist')
    cy.get('#sa-header').find('.item-list').should('include.text', 'Text (plain)')
    cy.get('#sa-link').should('exist')
    cy.get('#sa-link').find('.item-list').should('include.text', 'Link')
    // Verify the Carousel paragraph fields.
    cy.visit('/admin/structure/paragraphs_type/sa_carousel/fields')
    cy.get('#sa-background').should('exist')
    cy.get('#sa-background').find('.item-list').should('include.text', 'List (text)')
    cy.get('#sa-carousel-item').should('exist')
    cy.get('#sa-carousel-item').find('.item-list').should('include.text', 'Entity reference')
    cy.get('#sa-carousel-item').find('.item-list').should('include.text', 'Reference type: Paragraph')
    cy.get('#sa-carousel-item').find('.item-list').should('include.text', 'Paragraph type: Carousel Item')
    cy.get('#sa-width').should('exist')
    cy.get('#sa-width').find('.item-list').should('include.text', 'List (text)')
    cy.get('#sa-description').should('exist')
    cy.get('#sa-description').find('.item-list').should('include.text', 'Text (formatted, long)')
    cy.get('#sa-margin').should('exist')
    cy.get('#sa-margin').find('.item-list').should('include.text', 'List (text)')
    cy.get('#sa-padding').should('exist')
    cy.get('#sa-padding').find('.item-list').should('include.text', 'List (text)')
    cy.get('#sa-header').should('exist')
    cy.get('#sa-header').find('.item-list').should('include.text', 'Text (plain)')
    cy.get('#sa-col').should('exist')
    cy.get('#sa-col').find('.item-list').should('include.text', 'List (text)')
    // Verify the Carousel Item paragraph fields.
    cy.visit('/admin/structure/paragraphs_type/sa_carousel_item/fields')
    cy.get('#sa-carousel-caption').should('exist')
    cy.get('#sa-carousel-caption').find('.item-list').should('include.text', 'Text (plain)')
    cy.get('#sa-carousel-image').should('exist')
    cy.get('#sa-carousel-image').find('.item-list').should('include.text', 'Entity reference')
    cy.get('#sa-carousel-image').find('.item-list').should('include.text', 'Reference type: Media')
    cy.get('#sa-carousel-image').find('.item-list').should('include.text', 'Media type: Image')
    // Verify the Filtered List paragraph fields.
    cy.visit('/admin/structure/paragraphs_type/sa_filtered_list/fields')
    cy.get('#sa-background').should('exist')
    cy.get('#sa-background').find('.item-list').should('include.text', 'List (text)')
    cy.get('#sa-width').should('exist')
    cy.get('#sa-width').find('.item-list').should('include.text', 'List (text)')
    cy.get('#sa-description').should('exist')
    cy.get('#sa-description').find('.item-list').should('include.text', 'Text (formatted, long)')
    cy.get('#sa-filtered-list').should('exist')
    cy.get('#sa-filtered-list').find('.item-list').should('include.text', 'Views reference')
    cy.get('#sa-filtered-list').find('.item-list').should('include.text', 'Reference type: View')
    cy.get('#sa-header').should('exist')
    cy.get('#sa-header').find('.item-list').should('include.text', 'Text (plain)')
    cy.get('#sa-margin').should('exist')
    cy.get('#sa-margin').find('.item-list').should('include.text', 'List (text)')
    cy.get('#sa-padding').should('exist')
    cy.get('#sa-padding').find('.item-list').should('include.text', 'List (text)')
    cy.get('#sa-col').should('exist')
    cy.get('#sa-col').find('.item-list').should('include.text', 'List (text)')
    // Verify the Media paragraph fields.
    cy.visit('/admin/structure/paragraphs_type/sa_media/fields')
    cy.get('#sa-background').should('exist')
    cy.get('#sa-background').find('.item-list').should('include.text', 'List (text)')
    cy.get('#sa-width').should('exist')
    cy.get('#sa-width').find('.item-list').should('include.text', 'List (text)')
    cy.get('#sa-description').should('exist')
    cy.get('#sa-description').find('.item-list').should('include.text', 'Text (formatted, long)')
    cy.get('#sa-header').should('exist')
    cy.get('#sa-header').find('.item-list').should('include.text', 'Text (plain)')
    cy.get('#sa-margin').should('exist')
    cy.get('#sa-margin').find('.item-list').should('include.text', 'List (text)')
    cy.get('#sa-media').should('exist')
    cy.get('#sa-media').find('.item-list').should('include.text', 'Entity reference')
    cy.get('#sa-media').find('.item-list').should('include.text', 'Reference type: Media')
    cy.get('#sa-media').find('.item-list').should('include.text', 'Media type: Image, Remote video')
    cy.get('#sa-padding').should('exist')
    cy.get('#sa-padding').find('.item-list').should('include.text', 'List (text)')
    cy.get('#sa-col').should('exist')
    cy.get('#sa-col').find('.item-list').should('include.text', 'List (text)')
    // Verify the Side by Side paragraph fields.
    cy.visit('/admin/structure/paragraphs_type/sa_side_by_side/fields')
    cy.get('#sa-background').should('exist')
    cy.get('#sa-background').find('.item-list').should('include.text', 'List (text)')
    cy.get('#sa-width').should('exist')
    cy.get('#sa-width').find('.item-list').should('include.text', 'List (text)')
    cy.get('#sa-description').should('exist')
    cy.get('#sa-description').find('.item-list').should('include.text', 'Text (formatted, long)')
    cy.get('#sa-header').should('exist')
    cy.get('#sa-header').find('.item-list').should('include.text', 'Text (plain)')
    cy.get('#sa-margin').should('exist')
    cy.get('#sa-margin').find('.item-list').should('include.text', 'List (text)')
    cy.get('#sa-media').should('exist')
    cy.get('#sa-media').find('.item-list').should('include.text', 'Entity reference')
    cy.get('#sa-media').find('.item-list').should('include.text', 'Reference type: Media')
    cy.get('#sa-media').find('.item-list').should('include.text', 'Media type: Image, Remote video')
    cy.get('#sa-reverse-order').should('exist')
    cy.get('#sa-reverse-order').find('.item-list').should('include.text', 'Boolean')
    cy.get('#sa-padding').should('exist')
    cy.get('#sa-padding').find('.item-list').should('include.text', 'List (text)')
    cy.get('#sa-col').should('exist')
    cy.get('#sa-col').find('.item-list').should('include.text', 'List (text)')
    // Verify the Tab paragraph fields.
    cy.visit('/admin/structure/paragraphs_type/sa_tab/fields')
    cy.get('#sa-description').should('exist')
    cy.get('#sa-description').find('.item-list').should('include.text', 'Text (formatted, long)')
    cy.get('#sa-header').should('exist')
    cy.get('#sa-header').find('.item-list').should('include.text', 'Text (plain)')
    // Verify the Tabs paragraph fields.
    cy.visit('/admin/structure/paragraphs_type/sa_tabs/fields')
    cy.get('#sa-background').should('exist')
    cy.get('#sa-background').find('.item-list').should('include.text', 'List (text)')
    cy.get('#sa-width').should('exist')
    cy.get('#sa-width').find('.item-list').should('include.text', 'List (text)')
    cy.get('#sa-description').should('exist')
    cy.get('#sa-description').find('.item-list').should('include.text', 'Text (formatted, long)')
    cy.get('#sa-header').should('exist')
    cy.get('#sa-header').find('.item-list').should('include.text', 'Text (plain)')
    cy.get('#sa-margin').should('exist')
    cy.get('#sa-margin').find('.item-list').should('include.text', 'List (text)')
    cy.get('#sa-padding').should('exist')
    cy.get('#sa-padding').find('.item-list').should('include.text', 'List (text)')
    cy.get('#sa-tab-item').should('exist')
    cy.get('#sa-tab-item').find('.item-list').should('include.text', 'Entity reference revisions')
    cy.get('#sa-tab-item').find('.item-list').should('include.text', 'Reference type: Paragraph')
    cy.get('#sa-tab-item').find('.item-list').should('include.text', 'Paragraph type: Tab')
    cy.get('#sa-col').should('exist')
    cy.get('#sa-col').find('.item-list').should('include.text', 'List (text)')
    // Verify the Text paragraph fields.
    cy.visit('/admin/structure/paragraphs_type/sa_text/fields')
    cy.get('#sa-background').should('exist')
    cy.get('#sa-background').find('.item-list').should('include.text', 'List (text)')
    cy.get('#sa-width').should('exist')
    cy.get('#sa-width').find('.item-list').should('include.text', 'List (text)')
    cy.get('#sa-description').should('exist')
    cy.get('#sa-description').find('.item-list').should('include.text', 'Text (formatted, long)')
    cy.get('#sa-header').should('exist')
    cy.get('#sa-header').find('.item-list').should('include.text', 'Text (plain)')
    cy.get('#sa-margin').should('exist')
    cy.get('#sa-margin').find('.item-list').should('include.text', 'List (text)')
    cy.get('#sa-padding').should('exist')
    cy.get('#sa-padding').find('.item-list').should('include.text', 'List (text)')
    cy.get('#sa-col').should('exist')
    cy.get('#sa-col').find('.item-list').should('include.text', 'List (text)')
  })
  it('Verify creation of Page and all paragraph types.', () => {
    cy.login()
    // Variables for testing all the fields and verify after page creation.
    const pageTitle = "Page Test - " +  randText()
    const pageDescription = randLines()
    const seoDescription = randLines()
    const robotMeta = "Robots metatag test"
    const paragraphAccordionMainTitle = "Paragraph Accordion Title 1 - " +  randText()
    const paragraphAccordionMainDescription = randLines()
    const paragraphAccordionTitle1 = "Paragraph Accordion Title 1 - " +  randText()
    const paragraphAccordionDescription1 = randLines()
    const paragraphAccordionTitle2 = "Paragraph Accordion Title 2 - " +  randText()
    const paragraphAccordionDescription2 = randLines()
    const paragraphBlockTitle = "Paragraph Block Title - " +  randText()
    const paragraphBlockDescription = randLines()
    const paragraphBlockSelect = "system_powered_by_block";
    const paragraphCardTitle = "Paragraph Card Title - " +  randText()
    const paragraphCardDescription = randLines()
    const paragraphFilteredListTitle = "Paragraph Filtered List Title - " +  randText()
    const paragraphFilteredListDescription = randLines()
    const paragraphFilteredListSelect = "media";
    const paragraphMediaTitle = "Paragraph Media Title - " +  randText()
    const paragraphMediaDescription = randLines()
    const paragraphSideBySideDescription = randLines()
    const paragraphTabTitle1 = "Paragraph Tab Title 1 - " +  randText()
    const paragraphTabDescription1 = randLines()
    const paragraphTabTitle2 = "Paragraph Tab Title 2 - " +  randText()
    const paragraphTabDescription2 = randLines()
    const paragraphTextTitle = "Paragraph Text Title - " +  randText()
    const paragraphTextDescription = randLines()
    //Create the page.
    cy.visit('/node/add/sa_page')
    cy.get("#edit-title-wrapper").type(pageTitle)
    cy.get('#edit-sa-description-wrapper').type(pageDescription)
    cy.mediaLibraryAdd('#sa_featured_image-media-library-wrapper', 'image-sample_01.png')
    // Add all the paragraphs types with data for testing.
    cy.get('.horizontal-tabs-list').contains('Content').click()
    // Add an Accordion paragraph.
    cy.get('input[name="sa_components_sa_accordion_add_more"]').click()
    cy.wait(3000) // Wait for the UI to catch up.
    cy.get('input[name="sa_components[0][subform][sa_header][0][value]"]').type(paragraphAccordionMainTitle)
    cy.ckeditorType('[data-drupal-selector="edit-sa-components-0-subform-sa-description-wrapper"]', paragraphAccordionMainDescription)
    cy.get('input[name="sa_components[0][subform][sa_accordion_item][0][subform][sa_header][0][value]"]').type(paragraphAccordionTitle1)
    cy.ckeditorType('[data-drupal-selector="edit-sa-components-0-subform-sa-accordion-item-0-subform-sa-description-wrapper"]', paragraphAccordionDescription1)
    cy.get('input[name="sa_components_0_subform_sa_accordion_item_sa_accordion_item_add_more"]').click()
    cy.wait(3000) // Wait for the UI to catch up.
    cy.get('input[name="sa_components[0][subform][sa_accordion_item][1][subform][sa_header][0][value]"]').type(paragraphAccordionTitle2)
    cy.ckeditorType('[data-drupal-selector="edit-sa-components-0-subform-sa-accordion-item-1-subform-sa-description-wrapper"]', paragraphAccordionDescription2)
    // Add a Block paragraph.
    cy.get('[data-drupal-selector="edit-sa-components-add-more-operations"] .dropbutton__toggle').click()
    cy.get('input[name="sa_components_sa_block_add_more"]').click()
    cy.wait(3000) // Wait for the UI to catch up.
    cy.get('input[name="sa_components[1][subform][sa_header][0][value]"]').type(paragraphBlockTitle)
    cy.ckeditorType('[data-drupal-selector="edit-sa-components-1-subform-sa-description-wrapper"]', paragraphBlockDescription)
    cy.get('[data-drupal-selector="edit-sa-components-1-subform-sa-block-0-plugin-id"]').select(paragraphBlockSelect);
    cy.get('[data-drupal-selector="edit-sa-components-1-subform-sa-block-0-settings-label-display"]').check();
    // Add a Card paragraph.
    cy.get('[data-drupal-selector="edit-sa-components-add-more-operations"] .dropbutton__toggle').click()
    cy.get('input[name="sa_components_sa_card_add_more"]').click()
    cy.wait(3000) // Wait for the UI to catch up.
    cy.get('input[name="sa_components[2][subform][sa_header][0][value]"]').type(paragraphCardTitle)
    cy.ckeditorType('[data-drupal-selector="edit-sa-components-2-subform-sa-description-wrapper"]', paragraphCardDescription)
    cy.mediaLibraryAdd('#sa_card_image-media-library-wrapper-sa_components-2-subform', 'image-sample_01.png')
    // Add a Carousel paragraph.
    cy.get('[data-drupal-selector="edit-sa-components-add-more-operations"] .dropbutton__toggle').click()
    cy.get('input[name="sa_components_sa_carousel_add_more"]').click()
    cy.wait(3000) // Wait for the UI to catch up.
    cy.mediaLibraryAdd('#sa_carousel_image-media-library-wrapper-sa_components-3-subform-sa_carousel_item-0-subform', 'image-sample_01.png')
    cy.get('input[name="sa_components_3_subform_sa_carousel_item_sa_carousel_item_add_more"]').click()
    cy.wait(3000) // Wait for the UI to catch up.
    cy.mediaLibraryAdd('#sa_carousel_image-media-library-wrapper-sa_components-3-subform-sa_carousel_item-1-subform', 'image-sample_01.png')
    // Add a Filtered List paragraph.
    cy.get('[data-drupal-selector="edit-sa-components-add-more-operations"] .dropbutton__toggle').click()
    cy.get('input[name="sa_components_sa_filtered_list_add_more"]').click()
    cy.wait(3000) // Wait for the UI to catch up.
    cy.get('input[name="sa_components[4][subform][sa_header][0][value]"]').type(paragraphFilteredListTitle)
    cy.ckeditorType('[data-drupal-selector="edit-sa-components-4-subform-sa-description-wrapper"]', paragraphFilteredListDescription)
    cy.get('[data-drupal-selector="edit-sa-components-4-subform-sa-filtered-list-0-target-id"]').select(paragraphFilteredListSelect);
    // Add a Media paragraph.
    cy.get('[data-drupal-selector="edit-sa-components-add-more-operations"] .dropbutton__toggle').click()
    cy.get('input[name="sa_components_sa_media_add_more"]').click()
    cy.wait(3000) // Wait for the UI to catch up.
    cy.get('input[name="sa_components[5][subform][sa_header][0][value]"]').type(paragraphMediaTitle)
    cy.ckeditorType('[data-drupal-selector="edit-sa-components-5-subform-sa-description-wrapper"]', paragraphMediaDescription)
    // cy.mediaLibraryAdd('#sa_media-media-library-wrapper-sa_components-5-subform', 'image-sample_01.png')
    // Add a Side by Side paragraph.
    cy.get('[data-drupal-selector="edit-sa-components-add-more-operations"] .dropbutton__toggle').click()
    cy.get('input[name="sa_components_sa_side_by_side_add_more"]').click()
    cy.wait(3000) // Wait for the UI to catch up.
    cy.ckeditorType('[data-drupal-selector="edit-sa-components-5-subform-sa-description-wrapper"]', paragraphSideBySideDescription)
    cy.mediaLibraryAdd('#sa_media-media-library-wrapper-sa_components-5-subform', 'image-sample_01.png')
    // Add a Tabs paragraph.
    cy.get('[data-drupal-selector="edit-sa-components-add-more-operations"] .dropbutton__toggle').click()
    cy.get('input[name="sa_components_sa_tabs_add_more"]').click()
    cy.wait(3000) // Wait for the UI to catch up.
    cy.get('input[name="sa_components[6][subform][sa_tab_item][0][subform][sa_header][0][value]"]').type(paragraphTabTitle1)
    cy.ckeditorType('[data-drupal-selector="edit-sa-components-6-subform-sa-tab-item-0-subform-sa-description-wrapper"]', paragraphTabDescription1)
    cy.get('input[name="sa_components_6_subform_sa_tab_item_sa_tab_add_more"]').click()
    cy.wait(3000) // Wait for the UI to catch up.
    cy.get('input[name="sa_components[6][subform][sa_tab_item][1][subform][sa_header][0][value]"]').type(paragraphTabTitle2)
    cy.ckeditorType('[data-drupal-selector="edit-sa-components-6-subform-sa-tab-item-1-subform-sa-description-wrapper"]', paragraphTabDescription2)
    // Add a Text paragraph.
    cy.get('[data-drupal-selector="edit-sa-components-add-more-operations"] .dropbutton__toggle').click()
    cy.get('input[name="sa_components_sa_text_add_more"]').click()
    cy.wait(3000) // Wait for the UI to catch up.
    cy.get('input[name="sa_components[7][subform][sa_header][0][value]"]').type(paragraphTextTitle)
    cy.ckeditorType('[data-drupal-selector="edit-sa-components-7-subform-sa-description-wrapper"]', paragraphTextDescription)
    cy.get('.horizontal-tabs-list').contains('Advanced SEO').click()
    cy.get("#edit-sa-seo-page-title-wrapper").type(pageTitle)
    cy.get('#edit-sa-seo-description-wrapper').type(seoDescription)
    cy.mediaLibraryAdd('#sa_seo_image-media-library-wrapper', 'image-sample_01.png')
    cy.get("#edit-sa-robots-0-value").type(robotMeta)
    cy.get("#edit-submit--2--gin-edit-form").click()
    // Verify display of all created content on the page.
    cy.get('body').should('contain', pageTitle)
    cy.get('body').should('contain', paragraphAccordionTitle1)
    cy.get('body').should('contain', paragraphAccordionDescription1)
    cy.get('body').should('contain', paragraphAccordionTitle2)
    cy.get('body').should('contain', paragraphAccordionDescription2)
    cy.get('body').should('contain', paragraphBlockTitle)
    cy.get('body').should('contain', paragraphBlockDescription)
    cy.get('body').should('contain', paragraphCardTitle)
    cy.get('body').should('contain', paragraphCardDescription)
    cy.get('body').should('contain', paragraphFilteredListTitle)
    cy.get('body').should('contain', paragraphFilteredListDescription)
    // cy.get('body').should('contain', paragraphSideBySideDescription)
    // cy.get('body').should('contain', paragraphTabTitle1)
    // cy.get('body').should('contain', paragraphTabDescription1)
    // cy.get('body').should('contain', paragraphTabTitle2)
    // cy.get('body').should('contain', paragraphTabDescription2)
    cy.get('body').should('contain', paragraphTextTitle)
    cy.get('body').should('contain', paragraphTextDescription)
  })
})
